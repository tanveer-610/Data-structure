#include<stdio.h>
#include<stdlib.h>
void creation(int n);
void fordisplay();
struct node
{
    int data;
    struct node *prenode;
    struct node *nextnode;
}*head,*last;
int main()
{
    int ch,n;
    printf("1.Creation.\n2.Forward Display.\n3.Reverse Display.\n4.ADD at first.\n5.ADD at Last.\n6.Add at midd.\n7.Deletion.\n8.Exit\n");
    while(1)
    {
        printf("\nEnter your choice = ");
        scanf("%d",&ch);
        switch(ch)
        {
        case 1:
            printf("how many Number you wanna add ? ");
            scanf("%d",&n);
            creation(n);
            break;

        case 2 :
            printf("Data of that list :\n");
            fordisplay();
            break;
        case 3 :
            printf("Data of that list :\n");
            revdisplay();
            break;
        case 4:
            printf("Enter data = ");
            scanf("%d",&n);
            addAtfirst(n);
            break;
        case 5:
            printf("Enter data = ");
            scanf("%d",&n);
            lastadd(n);
            break;
        case 6:
            middadd();
            break;
        case 7:
            deletion();
            break;
        case 8:
            exit(0);
        default:
            printf("You enterd wrong number.\n");
        }
    }
}
void creation(int n)
{
    struct node *temp;
    if(n>=1)
    {
         printf("Enter data : ");
        head=(struct node *)malloc(sizeof(struct node));
        scanf("%d",&head->data);
        head->prenode=NULL;
        head->nextnode=NULL;
        last=head;
        for(int i=2; i<=n; i++)
        {
            struct node *p;
            p=(struct node *)malloc(sizeof(struct node));
            scanf("%d",&p->data);
            p->prenode=last;
            p->nextnode=NULL;
            last->nextnode=p;
            last=p;
        }
    }

}
void fordisplay()
{
    struct node *temp=head;
    if(temp==NULL)
        printf("there is no data");
    else
    {
        while(temp!=NULL)
        {
            printf("%d->",temp->data);
            temp=temp->nextnode;

        }
    }
}
void revdisplay()
{
    struct node *temp=last;
    if(temp==NULL)
        printf("there is no data");
    else
    {
        while(temp!=NULL)
        {
            printf("%d->",temp->data);
            temp=temp->prenode;

        }
    }
}
void addAtfirst(int n)
{
    struct node *temp;
      temp=(struct node *)malloc(sizeof( struct node));
        temp->data=n;
        temp->prenode=NULL;
        temp->nextnode=head;
        head->prenode=temp;
        head=temp;
}
void lastadd(int n)
{
        struct node *temp;
        temp=(struct node *)malloc(sizeof( struct node));
        temp->data=n;
        temp->nextnode=NULL;
        temp->prenode=last;
        last->nextnode=temp;
        last=temp;
}
int len()
{
    struct node *temp=head;
    int c=0;
    if(temp==NULL)
        c=0;
    else
    {
        while(temp->nextnode!=NULL)
        {
            c++;
            temp=temp->nextnode;
        }
    }
    return c;
}
void middadd()
{
    struct node *temp=head;
    if(temp==NULL)
        printf("Add at middle is not possible.\n");
    else
    {
        int loc,i=1;

        printf("Enter location.\n");
        scanf("%d",&loc);

        if(loc>len())
            printf("\nAdd is not possible.\n");
        else
        {
            struct node *p=(struct node *)malloc(sizeof(struct node));
            printf("Enter Data = ");
            scanf("%d",&p->data);
            p->prenode=NULL;
            p->nextnode=NULL;
            while(i<loc-1)
            {
                temp=temp->nextnode;
                i++;
            }
            p->nextnode=temp->nextnode;
            temp->nextnode=p;
            p->prenode=temp;
        }
    }
}
void deletion()
{
    int i=1,loc;
    printf("Enter location:");
    scanf("%d",&loc);
    if(loc>len())
        printf("DELETION ISN'T POSSIBLE\n");
    else if(loc==1)
    {
        struct node* temp=head;
        head=temp->nextnode;
        temp->prenode=NULL;
        temp->nextnode=NULL;
    }
    else
    {
        struct node* p=head,*q,*temp;
        while(i<loc-1)
        {
            p=p->nextnode;
            i++;
        }
        q=p->nextnode;
        p->nextnode=q->nextnode;
        q->nextnode=NULL;
        q->prenode=NULL;
    }
}
