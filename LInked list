#include<stdio.h>
#include<stdlib.h>
void append(void);
void addatbegin(void);
void addatafter(void);
int length(void);
void display(void);
void delete(void);
void reverse(void);
struct node
{
    int data;
    struct node* link;
};
struct node* root=NULL;
int len;
void main()
{
    int ch;
    char c;
    do
    {
        printf("1.Append\n");
        printf("2.Add at begin\n");
        printf("3.Add at after\n");
        printf("4.Length\n");
        printf("5.display\n");
        printf("6.Delete\n");
        printf("7.Reverse\n");
        printf("8.Quit\n");

        printf("Enter your choice:");
        scanf("%d",&ch);
        switch(ch)
        {
        case 1:
            append();
            break;
        case 2:
            addatbegin();
            break;
        case 3:
            addatafter();
            break;
        case 4:
           len= length();
           printf("Length=%d\n",len);
            break;
        case 5:
            display();
            break;
        case 6:
            delete();
            break;
        case 7:
            reverse();
            break;
            case 8:
            exit(1);
        default:
            printf("invalid\n\n");
        }
        printf("Works again 'y/n'\n");
         c=getche();
        system("cls");
    }while(c=='y');
}
void append()
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));
    printf("Enter info :");
    scanf("%d",&temp->data);
    temp->link=NULL;
    if(root==NULL)
    {
        root=temp;
    }
    else
    {
        struct node* p;
        p=root;
        while(p->link != NULL)
        {
            p=p->link;
        }
        p->link=temp;
    }
}
int length()
{
    int count=0;
    struct node* temp;
    temp=root;
    while(temp!=NULL)
    {
        count++;
        temp=temp->link;
    }
    return count;
}
void display()
{
    struct node* temp;
    temp=root;
    if(temp==NULL)
        printf("List is empty\n\n\n");
    else
    {
        while(temp!=NULL)
        {
            printf("%d-->",temp->data);
            temp=temp->link;
        }
        printf("\n\n");
    }
}
void addatbegin()
{
   struct node *temp,*p=root;
    temp=(struct node*)malloc(sizeof(struct node));
    printf("Enter info :");
    scanf("%d",&temp->data);
    temp->link=p;
    root=temp;
}
void addatafter()
{
  struct node* temp,*p;
  int i=1,loc;
  printf("Enter location:");
  scanf("%d",&loc);
 len=length();
  if(len<loc)
    printf("Invalid at thAT location\n");
  else
  {
      p=root;
      while(i<loc)
      {
          p=p->link;
          i++;
      }
   temp=(struct node*)malloc(sizeof(struct node));
   printf("Enter info :");
    scanf("%d",&temp->data);
    temp->link=NULL;
    temp->link=p->link;
    p->link=temp;
  }
}
void delete()
{
struct node* temp;
int loc,i=1;
 printf("Enter location:");
  scanf("%d",&loc);
  if(loc>length())
    printf("Invalid\n");
  else if(loc==1)
  {
      temp=root;
     root= temp->link;
     temp->link=NULL;
     free(temp);
  }
  else
  {
   struct node* p=root,*q;
   while(i<loc-1)
   {
       p=p->link;
       i++;
   }
   q=p->link;
   p->link=q->link;
   q->link=NULL;
   free(q);
  }
}
void reverse()
{
    struct node* temp,*p=root,*q=root;
    int i=0,j=length()-1,k;
    while(i<j)
    {
        k=0;
        while(k<j)
        {
            q=q->link;
            k++;
        }
        temp=p->data;
        p->data=q->data;
        q->data=temp;
        i++,j--;
        p=p->link;
        q=root;
    }
    printf("\nReverse succesfully");
    display();
}
